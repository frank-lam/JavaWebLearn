package lesson01;

public class Demo01 {

	public static void main(String[] args) {
		//同步代码块和同步方法
		
		//火车站卖票【问题】
		/**
		 * 湖南到广州火车票：今天13：00 ，100张
		 * 火车站有4个窗口在同时卖票，要保证一张票只能被卖一次
		 * 
		 * 搞4个线程表示4个窗口
		 * 
		 * 通过加锁可以解决被多次卖同一张票的问题
		 * 
		 * 使用同步代码块
		 */
		
		//创建卖票的任务
		TicketTask task = new TicketTask();
		
		//A窗口
		Thread t1 = new Thread(task);
		t1.setName("窗口A");
		//B窗口
		Thread t2 = new Thread(task);
		t2.setName("窗口B");
		//C窗口
		Thread t3 = new Thread(task);
		t3.setName("窗口C");
		//D窗口
		Thread t4 = new Thread(task);
		t4.setName("窗口D");
		
		//开启线程
		t1.start();
		t2.start();
		t3.start();
		t4.start();
	}
}

class TicketTask implements Runnable{
	//只有100张票
	int ticket = 100;
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		/**
		 * 同步代码换括号里参数可以传任意对象
		 * this是一个锁对象
		 * 不同的一把锁，卖相同的票总是还是存在
		 */
		//卖票
		while(true){
			synchronized (this) {//
				if(ticket <= 0){
					System.out.println("不好意思，票已经卖完了...");
					break;
				}else{
					System.out.println(Thread.currentThread() + "恭喜你卖到票，票号" + ticket);
					ticket --;
				}
			}
			
		}
	}
	
	/*@Override
	public void run() {
		// TODO Auto-generated method stub
		*//**
		 * 同步代码换括号里参数可以传任意对象
		 *//*
		synchronized (this) {
			//卖票
			while(true){
				if(ticket <= 0){
					System.out.println("不好意思，票已经卖完了...");
					break;
				}else{
					System.out.println(Thread.currentThread() + "恭喜你卖到票，票号" + ticket);
					ticket --;
				}
			}
		}
	}*/
}
